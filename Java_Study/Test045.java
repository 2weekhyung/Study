/*=========================================
	■■■ 실행 흐름의 컨트롤 (제어문) ■■■
	- 반복문 실습 및 관찰
=========================================*/

/*
○ 반복문의 개요

   주어진 조건이 『참』인 경우
   일정한 영역이 문장을 반복 수행 하다가
   조건식이 『거짓』이 되는 순간이 오면,
   반복 수행을 중단하는 문장이다.
   이러한 반복문에는 『while』, 『do~while』, 『for』문 등이 있으며
   반복의 제어를 위해 『break』, 『continue』등을 사용하는 경우가 있다.

○ while 문
   
   조건식을 먼저 비교하여
   조건식의 처리 결과가 참인 경우, 특정 영역을 반복 수행하는 문장으로
   반복 횟수가 정해져 있지 않은 경우나
   반복 횟수가 많은 경우 주로 사용한다.
   while 문은 조건이 많지 앟은 경우
   반복은 커녕 단 한 번도 실행 되지 않을 수 있다.

○ while 문의 형식 및 구조

   while(조건식)
   {
	   실행문;
   }

*/

// 1부터 100까지의 정수중에서
// 짝수들의 합과 홀수들의 합을 따로 구분하여 계산한다.
// 그리고, 결과값을 출력하는 프로그램을 구현한다.
// 단, 반복문은 while문을 사용할 수 있도록 하며,
// 조건 구문은 if 조건문을 사용하여 작성할 수 있도록 한다.

// 실행 예)
// 1부터 100까지의 정수 중
// 짝수의 합 2550
// 홀수의 합 2500
// 계속하려면 아무 키나 누르세요...



public class Test045
{
	public static void main(String[] args)
	{	/*
		int num = 1;
		int evenSum = 0;
		int oddSum = 0;

		while (num <= 100)
		{
			if (num % 2 == 0)
			{
				evenSum += num;
				num++;
			}
			else
			{
				oddSum += num;
				num++;	
			}
		}

		System.out.println("1부터 100까지의 정수 중");
		System.out.println("짝수의 합 : " + evenSum);
		System.out.println("홀수의 합 : " + oddSum);
		*/

		// 주요 변수 선언
		int n = 1;	//-- 1부터 100까지 1씩 증가할 변수
		int even=0;	//-- 짝수들의 누적합을 담아낼 변수
		int odd=0;	//-- 홀수들의 누적합을 담아낼 변수


		// 연산 및 처리
		while (n <= 100)	// 1 ~100
		{
			if (n%2==0)	//-- n이 짝수일 경우
			{
				even += n;
			}
			else if (n%2!=0)//-- n 이 홀수일 경우
			{
				odd += n;
			}
			else	//-- 홀수도 짝수도 아닐 경우
			{
				System.out.println("판별 불가 데이터~!!!");
				return;		//- 메소드 종료 → main() 메소드 종료 → 프로그램 종료
			}

			n++;	//-- n 을 1 만큼 증가
		}

		// 결과 출력
		System.out.println("1부터 100까지의 정수 중");
		System.out.println("짝수의 합 : " + even);
		System.out.println("홀수의 합 : " + odd);
	}
}

// 실행 결과
/*
1부터 100까지의 정수 중
짝수의 합 : 2550
홀수의 합 : 2500
계속하려면 아무 키나 누르십시오 . . .
*/
