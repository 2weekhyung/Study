/*=========================================================
	■■■ 배열 ■■■
	- 배열의 선언과 초기화
	- 배열의 기본적 활용
===========================================================*/

// ○ 과제
//    사용자로부터 임의의 정수를 임의의 갯수만큼 입력받아
//    입력받은 수 중에서 가장 큰 수를 출력하는 프로그램을 구현한다.
//    단, 배열을 활용하여 구현할 수 있도록 한다.

// 실행 예)
// 입력할 데이터의 갯수 : 11
// 데이터 입력(공백 구분) : 45 11 26 35 66 97 50 2 123 10 7

// >> 가장 큰 수 → 123
// 계속하려면 아무 키나 누르세요....

import java.util.Scanner;

public class Test083
{
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);

		int count;	// 데이터의 갯수를 입력받을 변수
		int num;	// 숫자를 입력 받을 변수
	
		System.out.print("입력할 데이터의 갯수 : ");
		count = sc.nextInt();
		int[] arr = new int[count];	// 데이터의 갯수를 입력받아, count 만큼의 배열을 만든다.
		
		System.out.print("데이터 입력(공백 구분) : ");

		for (int i=0 ; i < count ; i++ )
		{
			arr[i] = sc.nextInt();		// arr[0] 부터 arr[count-1] 까지 배열을 입력한다.
		}

		// 테스트
		/*
		for (int i=0 ; i < count ; i++ )
		{
			System.out.printf("%2d",arr[i]);	// 배열이 잘 만들어 졌는지 확인
		}
		*/

		for (int j=1; j<count ; j++ )			// 과제가 배열을 정렬하라는 것이 아니라 단순히 배열 내에서 큰 수를 출력하는 것이기 때문에
		{										// 비트열 반전을 통해 arr[0] 에 가장 큰 값을 담았다.
			if (arr[j] > arr[0])
			{
				arr[j] = arr[j]^arr[0];
				arr[0] = arr[0]^arr[j];
				arr[j] = arr[j]^arr[0];
			}
		}
		
		System.out.println(">> 가장 큰수 → " + arr[0]);	//배열 내에 가장 큰 값이 담긴 arr[0]을 출력

	}
}

// 실행 결과

/*
입력할 데이터의 갯수 : 5
데이터 입력(공백 구분) : 10 20 30 40 50
>> 가장 큰수 → 50
계속하려면 아무 키나 누르십시오 . . .

입력할 데이터의 갯수 : 7
데이터 입력(공백 구분) : 70 60 50 40 30 20 10
>> 가장 큰수 → 70
계속하려면 아무 키나 누르십시오 . . .
*/